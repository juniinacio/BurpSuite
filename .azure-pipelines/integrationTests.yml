parameters:
  azureSubscription: ''
  resourceGroupName: ''
  name: ''
  displayName: ''
  pool: ''
  uri: ''
  password: ''
  apiVersion: ''
  os: ''
  depends: ''
  start: 'false'
  stop: 'false'
  pwsh: false

jobs:
  - deployment: ${{ parameters.name }}
    displayName: ${{ parameters.displayName }}
    variables:
      BWAF_URI: ${{ parameters.uri }}
      BWAF_VERSION: ${{ parameters.apiVersion }}
      BWAF_PASSWORD: ${{ parameters.password }}
    ${{ if eq(parameters['depends'], true) }}:
    dependsOn: ${{ parameters.depends }}
    pool:
      vmImage: ${{ parameters.pool }}
    environment: '${{ parameters.displayName }}'
    strategy:
      runOnce:
        deploy:
          steps:
            - task: AzureResourceGroupDeployment@2
              displayName: 'Start Barracuda WAF'
              inputs:
                azureSubscription: ${{ parameters.azureSubscription }}
                action: Start
                resourceGroupName: ${{ parameters.resourceGroupName }}
              condition: and(succeeded(), eq('${{ parameters.start }}', 'true'))

            - task: PowerShell@2
              displayName: 'Register Private Repository'
              inputs:
                targetType: 'inline'
                script: |
                  $n = 'BarracudaWAF'
                  $e = "$(email)"
                  $url = "$(artifactsUrl)"
                  $pwd = ConvertTo-SecureString "$(artifactsPAT)" -AsPlainText -Force
                  $creds = New-Object PSCredential($e, $pwd)

                  # LINK: https://github.com/Microsoft/artifacts-credprovider
                  $Env:NUGET_CREDENTIALPROVIDER_SESSIONTOKENCACHE_ENABLED = 'true'
                  $Env:VSS_NUGET_EXTERNAL_FEED_ENDPOINTS = '{{"endpointCredentials": [{{"endpoint":"{0}", "username":"{1}", "password":"{2}"}}]}}' -f $url, $e, $pwd

                  if(-not (Get-PSRepository | ? Name -eq $n)) {
                    Register-PSRepository -Credential $creds -Name $n -SourceLocation $url -PublishLocation $url -InstallationPolicy Trusted -Verbose
                  }
                pwsh: ${{ parameters.pwsh }}

            - task: PowerShell@2
              displayName: 'Install Barracuda.WAF Module'
              inputs:
                targetType: 'inline'
                script: |
                  # Load the psd1 file so you can read the version
                  $manifest = Import-PowerShellDataFile .\$(Folder)\*.psd1

                  $n = 'BarracudaWAF'
                  $e = "$(email)"
                  $b = "$($manifest.ModuleVersion).$(Build.BuildId)"
                  $pwd = ConvertTo-SecureString "$(artifactsPAT)" -AsPlainText -Force # Readonly PAT for Azure DevOps artifacts
                  $creds = New-Object PSCredential($e, $pwd)

                  # LINK: https://github.com/Microsoft/artifacts-credprovider
                  $Env:NUGET_CREDENTIALPROVIDER_SESSIONTOKENCACHE_ENABLED = 'true'
                  $Env:VSS_NUGET_EXTERNAL_FEED_ENDPOINTS = '{{"endpointCredentials": [{{"endpoint":"{0}", "username":"{1}", "password":"{2}"}}]}}' -f $url, $e, $pwd

                  Install-Module -Name Barracuda.WAF -Repository $n -Credential $creds -MaximumVersion $b -MinimumVersion $b -Force -Scope CurrentUser -Verbose
                workingDirectory: '$(Pipeline.Workspace)/test'
                pwsh: ${{ parameters.pwsh }}

            - task: PowerShell@2
              displayName: 'Install Pester'
              inputs:
                targetType: 'inline'
                script: 'Install-Module -Name Pester -Repository PSGallery -Force -Scope CurrentUser -AllowClobber -SkipPublisherCheck'
                pwsh: ${{ parameters.pwsh }}

            - task: PowerShell@2
              displayName: 'Run Integration Tests'
              inputs:
                targetType: 'inline'
                script: |
                  $env:BWAF_URI = '$(BWAF_URI)'
                  $env:BWAF_VERSION = '$(BWAF_VERSION)'
                  $env:BWAF_PASSWORD = '$(BWAF_PASSWORD)'
                  Import-Module Barracuda.WAF
                  Invoke-Pester -EnableExit -Strict -OutputFile test-results.xml -OutputFormat NUnitXml
                failOnStderr: true
                workingDirectory: '$(Pipeline.Workspace)/test/integration'
                pwsh: ${{ parameters.pwsh }}

            - task: PublishTestResults@2
              displayName: 'Publish Test Results'
              inputs:
                testResultsFormat: NUnit
                testResultsFiles: '**/test-results.xml'
                searchFolder: '$(Pipeline.Workspace)/test/integration'
                testRunTitle: '${{ parameters.os }} Tests'
              continueOnError: true
              condition: succeededOrFailed()

            - task: AzureResourceGroupDeployment@2
              displayName: 'Stop and Deallocate Barracuda WAF'
              inputs:
                azureSubscription: ${{ parameters.azureSubscription }}
                action: StopWithDeallocate
                resourceGroupName: ${{ parameters.resourceGroupName }}
              condition: and(succeeded(), eq('${{ parameters.stop }}', 'true'))
